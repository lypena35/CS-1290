Chapter 2: Problem 2.1 Remove Dups: Write code to remove duplicates from an unsorted linked list. FOLLOW UP   How would you solve this problem if a temporary buffer is not allowed?

I: We are simply removing the duplicated from a unsorted linked list. 
D: We can use two pointers and we iterate through the linked list and check all the nodes for duplicates. 
E,A: Step 1: Works some small instances by hand:
                  9-> 4->3->3->1   or 1->1->3->2 are examples of duplicates of unsorted arrays we can edit to make sure the duplicates don’t get added. 

      Step 2: write down what you did:
          First, we need to have a pointer at the head and we traverse the linked list and we have another pointer for the current node and we have another while loop to check if the next node is not null if they are equal we move the pointer to point to next.next node so we lose the duplicate node, we then set the current.next to current and we keep going. 

   Step 3: Fine patterns
     I have seen this problem many times before so this one I was able to solve quickly because I have had a lot of practice with this problem. 


   Step 4: Check by hand
         Will be added in a compressed file

   Step 5: translate it to code
public static void deleteDup(iNode head) {
            iNode curr = head;
            while (curr != null) {
                iNode pointer2 = curr;
                while (pointer2.next != null) {
                    if (pointer2.next.data == curr.data) {
                        pointer2.next = pointer2.next.next;
                    } else {
                        pointer2 = pointer2.next;
                    }
                }
                curr = curr.next;
            }
        }

Step 6: run test cases: 
   Added 1-> 9->5 ->5
Output: 1->9->5
So, I went ahead and created the linked list and it did what it was supposed to do get rid of 5. 
Step 7: Debug failed test case:
Getting the linked list class set up and get it working took some time but once it got done it worked. 
L: I should have just used a previously used class which I will probably end up using. Like I said the actual method was nothing new so it wasn’t hard to work out at all.
I am sure we could use a hashtable to make a more efficient algorithm.

