Chapter 2: Problem 2.5 Sum lists: You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in reverse order, such that the 1’s digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list. 
EXAMPLE
Input: (7->1->6) + (5->9->2). That is 617+295.
Output: 2->1->9. That is 912.
FOLLOW UP
Suppose that digits are stored in forward order. Repeat the above problem.
Input:(6->1->7) + (2->9->5). That is, 617 + 295.
Output: 9->1->2. That is, 912.

I: We then basically take the nodes and we collect them all like one large number in reverse and we add it with another list and we output the answer. 
D: So, this is literally doing addition as if we were doing it on a piece of paper, so we need to consider there will be a carry-over number. We also need to make sure we read it correctly. Of course, we need to make sure they are not null. 
E,A: Step 1: Works some small instances by hand:
          Say we have (4->1) + (1->3) that would be 41+13 and the output would be 5->4 which is 54. Or (1->1) + (2->2) that would be 11+22 and we would get 3->3 which would be 33. 
      Step 2: write down what you did:
         So, we need two references to nodes and a integer to hold the carry over number and we need to check if they are null or equal to 0. And then we need to create a new node to add to our list for the result and then we need to read that list and them together and output the new list.

   Step 3: Find patterns
        Of course, we need to check to make sure that nothing is null which is a must and of course we go through the list while that list is not null. Other than that, this is a very different type of problem that is very interesting.

   Step 4: Check by hand
         Attached is the images in a compressed file.

   Step 5: translate it to code
  Public iNode sumList(iNode one,iNode two, int carryOver){
    If(one is null and two is null and carryover is 0) return null;
    Create a new iNode result;
     Int sumVal=carryover;
     If(one is not null) {
   We add the data into sumVal;
  }
   If(two is not null){
  We add the data from two to sumVal;
  }
//then we do what is necessary to get the result;
Return result;
}
Step 6: run test cases: 
      We hope we get similar outputs like the ones described in step 1. 
Step 7: Debug failed test case:
      This problem was really difficult I didn’t have time to solve it. The reason being is the way we sum things instead of just simply summing as we go along we are actually collecting one number and then adding it to another number which is way different than simply summing the integers in each list and just adding them together. 
L: This was a really interesting way at looking at addition using linked list. It is definitely a challenge to accomplish this. 
