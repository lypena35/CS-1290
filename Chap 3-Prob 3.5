Chapter 3: Problem 3.5 Sort Stack: Write a program to sort a stack such that the smallest items are on the top. You can use an additional temporary stack, but you may not copy the elements into any other data structure (such as an array). The stack supports the following operations: push, pop, peek, and isEmpty. 

I: We are sorting a stack where the smallest will have the first element on top, so we can pop it or peek at it. We can use a temp stack, but we cannot use any other data structure.  
D: The first thing I thought of was storing the popped variables into an array or array list and then sorting them and putting them back into the stack but since we canâ€™t do that according to the requirements of the question. Therefore, I had to think of a new plan. I was thinking about the towers of Hanoi and how we could almost implement something like that in this situation where we can have a temp variable hold some of the numbers and then we can essentially use the two stacks to move the numbers back in forth till they are sorted. 
E,A: Step 1: Works some small instances by hand:
              Say we push 1,3,2,6 into the stack. Then we have our temp stack and our temp variable. We pop 6 and we hold it in our temp. Then we get 2 and push it onto the temp stack. We then pop 3 and push it into the new temp stack and then we check the next value and our temp, and we see 1 and we push it onto the stack then push 6 on top. Then we push 6 back to the new stack and we hold 1 in the temp variable and we push 3 and then 2 and then 1 and now they are sorted with the smallest integer on top. 
      Step 2: write down what you did:
           I first traced what I was thinking to make sure it worked I had to tweak it a bit but once I got the hang of it and I knew what I was doing made sense. I went ahead and worked on the code to get what I need. Which was to take advantage of the fact that we have that temp variable to help us move back and forth between the two stacks similar to the last problem, as well as, the towers of Hanoi. 

   Step 3: Find patterns
       Well first off, the towers of Hanoi make me think we have two out of the three placements and the temp variable would act as the third and we shuffle around the variables tell we get it the way we need it to and then push everything back onto the stack in the right order. I also thought about the previous problem that used two stacks to implement a queue and since I had worked on that problem before I took the same idea into account and did something similar to that. 

   Step 4: Check by hand
         See attached picture in compressed file. 

   Step 5: translate it to code
  public sortStack(Stack stack1){
int temp=stack.pop();
Stack tempStack= new Stack;
while(!stack1.isEmpty()){
       while(!tempStack.isEmpty() && tempStack.peek()>temp){
            stack1.push(tempStack.pop());
         }
tempStack.push(temp);
    }
//Then we copy everything back from the old stack to the new stack
while(!tempStack.isEmpty()){
       Stack1.push(tempStack.pop());
}
}
Step 6: run test cases: 
Input stack: push (1), (3), (2), (6) and then we let the algorithm do its thing. 
Output: a stack where we could pop 1,2,3, and 6.
Step 7: Debug failed test case:
    I again like the previous problems used some pseudocode for the equation. I really liked this problem because it was an extension of the previous queue using two stacks problem. 
L: I enjoyed this problem it was very similar to the previous one and was fun to work on. 
